$bgc-atom-input-disabled: $c-gray-lightest !default;
$c-atom-input-placeholder: $c-gray-dark !default;
$m-atom-input-type-left: $m-m !default;
$m-atom-input-type-right: $m-m !default;
$bdrs-atom-input: $bdrs-none !default;

$base-class: '.sui-AtomInput-input';
$class-read-only: '#{$base-class}--readOnly';
$c-atom-input-type: success $c-success, error $c-error, alert $c-alert;

#{$base-class} {
  @extend %sui-atom-input-input;
  border-radius: $bdrs-atom-input;
  min-height: auto;

  &--size {
    width: inherit;
  }

  &--hidden {
    display: none;
  }

  &#{$base-class}--noBorder {
    border: 0;

    &:focus {
      border: 0;
      box-shadow: none;
      outline: 0;
    }
  }

  &::placeholder {
    color: $c-atom-input-placeholder;
  }

  &:disabled {
    pointer-events: none;
    &:not(#{$class-read-only}) {
      background: $bgc-atom-input-disabled;
    }
  }

  &:focus {
    @extend %sui-atom-input-input-focus;
  }

  @each $type, $attr in $sizes-atom-input {
    &-#{$type} {
      height: $attr;
      min-height: $attr;
    }
  }

  @each $state, $color in $c-atom-input-type {
    &.sui-AtomInput-input--#{$state} {
      border-color: $color;
    }
  }
}
