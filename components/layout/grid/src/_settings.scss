$layout-grid-breakpoints: $breakpoints;
$layout-grid-columns: $grid-columns;
$layout-grid-m-base: $m-base / 2;

$ai-layout-grid: center flex-start flex-end;
$jc-layout-grid: flex-start center flex-end space-between space-around;

@mixin grid-item-value($breakpoint-name, $columns) {
  &--#{$breakpoint-name}-#{$columns} {
    @include grid-flex-basis($columns);
  }
}

@mixin grid-item-offset($breakpoint-name, $columns) {
  &--#{$breakpoint-name}Offset-#{$columns} {
    margin-left: (100% / $layout-grid-columns) * $columns;
  }
}

@mixin grid-item-gutter($base-class, $m-base, $gutter) {
  #{$base-class}-item {
    padding: 0 $m-base * $gutter;
  }
}

@mixin grid-item-sizes($breakpoints, $columns) {
  @each $breakpoint-name, $breakpoint-value in $breakpoints {
    @for $col from 1 through $columns {
      @media (min-width: $breakpoint-value) {
        @include grid-item-value($breakpoint-name, $col);
        @include grid-item-offset($breakpoint-name, $col);
      }
    }
  }
}

@mixin grid-gutters($base-class, $breakpoints, $gutters) {
  @each $breakpoint-name, $breakpoint-value in $breakpoints {
    @for $gutter from 0 through $gutters {
      @media (min-width: $breakpoint-value) {
        &#{$base-class}--gutter-#{$breakpoint-name}-#{$gutter} {
          @include grid-parent($layout-grid-m-base * $gutter);
          @include grid-item-gutter($base-class, $layout-grid-m-base, $gutter);
        }
      }
    }
  }
}

@mixin grid-align-items($properties) {
  @each $value in $properties {
    &--ai-#{$value} {
      align-items: $value;
    }
  }
}

@mixin grid-justify-content($properties) {
  @each $value in $properties {
    &--jc-#{$value} {
      justify-content: $value;
    }
  }
}
